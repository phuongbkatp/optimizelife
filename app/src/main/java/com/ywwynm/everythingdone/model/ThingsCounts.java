package com.ywwynm.everythingdone.model;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;

import com.ywwynm.everythingdone.Def;
import com.ywwynm.everythingdone.database.ThingDAO;
import com.ywwynm.everythingdone.utils.LocaleUtil;

import static com.ywwynm.everythingdone.model.Thing.DELETED;
import static com.ywwynm.everythingdone.model.Thing.FINISHED;
import static com.ywwynm.everythingdone.model.Thing.GOAL;
import static com.ywwynm.everythingdone.model.Thing.HABIT;
import static com.ywwynm.everythingdone.model.Thing.NOTE;
import static com.ywwynm.everythingdone.model.Thing.NOTIFICATION_GOAL;
import static com.ywwynm.everythingdone.model.Thing.NOTIFICATION_HABIT;
import static com.ywwynm.everythingdone.model.Thing.NOTIFICATION_NOTE;
import static com.ywwynm.everythingdone.model.Thing.NOTIFICATION_REMINDER;
import static com.ywwynm.everythingdone.model.Thing.NOTIFICATION_UNDERWAY;
import static com.ywwynm.everythingdone.model.Thing.NOTIFY_EMPTY_DELETED;
import static com.ywwynm.everythingdone.model.Thing.NOTIFY_EMPTY_FINISHED;
import static com.ywwynm.everythingdone.model.Thing.REMINDER;
import static com.ywwynm.everythingdone.model.Thing.UNDERWAY;
import static com.ywwynm.everythingdone.model.Thing.WELCOME_GOAL;
import static com.ywwynm.everythingdone.model.Thing.WELCOME_HABIT;
import static com.ywwynm.everythingdone.model.Thing.WELCOME_NOTE;
import static com.ywwynm.everythingdone.model.Thing.WELCOME_REMINDER;
import static com.ywwynm.everythingdone.model.Thing.WELCOME_UNDERWAY;

/**
 * Created by ywwynm on 2015/7/11.
 * Model layer for database generated by table things_count
 */
@SuppressLint("CommitPrefEdits")
public class ThingsCounts {

    public static final String TAG = "ThingsCounts";

    public static final int ALL = Thing.DELETED + 1;

    private SharedPreferences mCounts;

    private static ThingsCounts sThingsCounts;

    private ThingsCounts(Context context) {
        mCounts = context.getSharedPreferences(
                Def.Meta.THINGS_COUNTS_NAME, Context.MODE_PRIVATE);
        if (mCounts.getInt("0_0", -1) == -1) {
            init();
        } else {
            checkSelf(context);
        }
    }

    public static ThingsCounts getInstance(Context context) {
        if (sThingsCounts == null) {
            synchronized (ThingsCounts.class) {
                if (sThingsCounts == null) {
                    sThingsCounts = new ThingsCounts(context.getApplicationContext());
                }
            }
        }
        return sThingsCounts;
    }

    private void checkSelf(Context context) {
        ThingDAO dao = ThingDAO.getInstance(context);
        for (int type = Thing.NOTE; type <= Thing.NOTIFY_EMPTY_DELETED; type++) {
            int totalCount = 0;
            for (int state = Thing.UNDERWAY; state <= Thing.DELETED; state++) {
                Cursor cursor = dao.getThingsCursor("type=" + type + " and state=" + state);
                int cursorCount = cursor.getCount();
                int prefCount = getCount(type, state);
                if (cursorCount != prefCount) {
                    setCounts(type, state, cursorCount);
                }
                totalCount += cursorCount;
                cursor.close();
            }
            if (getCount(type, ALL) < totalCount) {
                setCounts(type, ALL, totalCount);
            }
        }
    }

    public int getCount(int type, int state) {
        return mCounts.getInt(type + "_" + state, 0);
    }

    public int getThingsCountForActivityHeader(int limit) {
        int count = 0;
        switch (limit) {
            case Def.LimitForGettingThings.ALL_UNDERWAY:
                for (int i = NOTE; i <= WELCOME_UNDERWAY; i++) {
                    count += getCount(i, UNDERWAY);
                }
                count += getCount(NOTIFICATION_UNDERWAY, UNDERWAY);
                break;
            case Def.LimitForGettingThings.NOTE_UNDERWAY:
                count = getCount(NOTE, UNDERWAY)
                        + getCount(WELCOME_NOTE, UNDERWAY)
                        + getCount(NOTIFICATION_NOTE, UNDERWAY);
                break;
            case Def.LimitForGettingThings.REMINDER_UNDERWAY:
                count = getCount(REMINDER, UNDERWAY)
                        + getCount(WELCOME_REMINDER, UNDERWAY)
                        + getCount(NOTIFICATION_REMINDER, UNDERWAY);
                break;
            case Def.LimitForGettingThings.HABIT_UNDERWAY:
                count = getCount(HABIT, UNDERWAY)
                        + getCount(WELCOME_HABIT, UNDERWAY)
                        + getCount(NOTIFICATION_HABIT, UNDERWAY);
                break;
            case Def.LimitForGettingThings.GOAL_UNDERWAY:
                count = getCount(GOAL, UNDERWAY)
                        + getCount(WELCOME_GOAL, UNDERWAY)
                        + getCount(NOTIFICATION_GOAL, UNDERWAY);
                break;
            case Def.LimitForGettingThings.ALL_FINISHED:
                for (int i = Thing.NOTE; i <= Thing.NOTIFICATION_GOAL; i++) {
                    count += getCount(i, FINISHED);
                }
                break;
            case Def.LimitForGettingThings.ALL_DELETED:
                for (int i = Thing.NOTE; i <= Thing.NOTIFICATION_GOAL; i++) {
                    count += getCount(i, DELETED);
                }
                break;
        }
        return count;
    }

    public String getCompletionRate(int limit) {
        int[] counts = new int[2];
        switch (limit) {
            case Def.LimitForGettingThings.ALL_UNDERWAY:
            case Def.LimitForGettingThings.ALL_FINISHED:
            case Def.LimitForGettingThings.ALL_DELETED:
                for (int i = Thing.NOTE; i <= Thing.GOAL; i++) {
                    counts[0] += getCount(i, FINISHED);
                    counts[1] += getCount(i, ALL);
                }
//                counts[0] -= mCounts[Thing.HABIT][Thing.FINISHED];
//                counts[1] -= mCounts[Thing.HABIT][ALL];
//                counts[0] += mHabitFinished;
//                counts[1] += mHabitRecord;
                break;
            case Def.LimitForGettingThings.NOTE_UNDERWAY:
                counts[0] = getCount(NOTE, FINISHED);
                counts[1] = getCount(NOTE, ALL);
                break;
            case Def.LimitForGettingThings.REMINDER_UNDERWAY:
                counts[0] = getCount(REMINDER, FINISHED);
                counts[1] = getCount(REMINDER, ALL);
                break;
            case Def.LimitForGettingThings.HABIT_UNDERWAY:
                counts[0] = getCount(HABIT, FINISHED);
                counts[1] = getCount(HABIT, ALL);
//                counts[0] = mHabitFinished;
//                counts[1] = mHabitRecord;
                break;
            case Def.LimitForGettingThings.GOAL_UNDERWAY:
                counts[0] = getCount(GOAL, FINISHED);
                counts[1] = getCount(GOAL, ALL);
                break;
            default:break;
        }
        return LocaleUtil.getPercentStr(counts[0], counts[1]);
    }

    public void handleCreation(int type) {
        updateCounts(type, UNDERWAY, 1);
        updateCounts(type, ALL, 1);
    }

    public void handleUpdate(
            int typeBefore, int stateBefore,
            int typeAfter,  int stateAfter, int count) {
        if (stateBefore != Thing.DELETED_FOREVER) {
            updateCounts(typeBefore, stateBefore, -count);
        }
        if (stateAfter != Thing.DELETED_FOREVER) {
            updateCounts(typeAfter, stateAfter, count);
            updateCounts(typeBefore, ALL, -count);
            updateCounts(typeAfter, ALL, count);
        }
    }

//    public boolean isNormal() {
//        for (int i = Thing.NOTE; i <= Thing.NOTIFY_EMPTY_DELETED; i++) {
//            for (int j = Thing.UNDERWAY; j <= Thing.DELETED_FOREVER; j++) {
//                if (mCounts[i][j] < 0 ||
//                        mCounts[i][j] > mCounts[i][Thing.DELETED_FOREVER]) {
//                    return false;
//                }
//            }
//        }
//        return true;
//    }

    private void updateCounts(int type, int state, int vary) {
        int count = getCount(type, state);
        count += vary;
        setCounts(type, state, count);
    }

    private void setCounts(int type, int state, int count) {
        mCounts.edit().putInt(type + "_" + state, count).commit();
    }

    private void init() {
        SharedPreferences.Editor editor = mCounts.edit();
        for (int i = NOTE; i <= NOTIFY_EMPTY_DELETED; i++) {
            for (int j = UNDERWAY; j <= ALL; j++) {
                editor.putInt(i + "_" + j, 0);
            }
        }

        for (int i = Thing.WELCOME_UNDERWAY; i <= Thing.WELCOME_GOAL; i++) {
            editor.putInt(i + "_" + UNDERWAY, 1);
            editor.putInt(i + "_" + ALL, 1);
        }

        editor.putInt(NOTIFY_EMPTY_FINISHED + "_" + UNDERWAY, 1);
        editor.putInt(NOTIFY_EMPTY_FINISHED + "_" + ALL, 1);
        editor.putInt(NOTIFY_EMPTY_DELETED + "_" + UNDERWAY, 1);
        editor.putInt(NOTIFY_EMPTY_DELETED + "_" + ALL, 1);

        editor.commit();
    }
}
